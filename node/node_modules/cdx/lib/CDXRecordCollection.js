var CDXRecord, CDXRecordCollection, stream, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require("lodash");

CDXRecord = require("./CDXRecord");

stream = require("stream");

module.exports = CDXRecordCollection = (function(_super) {
  __extends(CDXRecordCollection, _super);

  function CDXRecordCollection(signature) {
    this.signature = signature != null ? signature : [];
    CDXRecordCollection.__super__.constructor.apply(this, arguments);
    this._writableState.objectMode = false;
    this._readableState.objectMode = true;
    this._headerFound = false;
    this._buffer = "";
    this.reverseSignatureMap = _.invert(this.signatureMap);
  }

  CDXRecordCollection.prototype.records = [];

  CDXRecordCollection.prototype.signature = null;

  CDXRecordCollection.prototype.delimiter = null;

  CDXRecordCollection.prototype.signatureMap = {
    compressedRecordSize: "S",
    compressedDATFileOffset: "D",
    compressedARCFileOffset: "V",
    uncompressedDATFileOffset: "d",
    uncompressedARCFileOffset: "v",
    ARCDocumentLength: "n",
    oldStyleChecksum: "c",
    newStyleChecksum: "k",
    canonicalizedUrl: "A",
    canonicalizedFrame: "F",
    canonicalizedHost: "H",
    canonicalizedImage: "I",
    canonicalizedJumpPoint: "J",
    canonicalizedLink: "L",
    canonicalizedPath: "P",
    canonicalizedRedirect: "R",
    canonicalizedHrefURL: "X",
    canonicalizedSrcURL: "Y",
    canonicalizedScriptURL: "Z",
    originalMimeType: "m",
    originalURL: "a",
    originalFrame: "f",
    originalHost: "h",
    originalImage: "i",
    originalJumpPoint: "j",
    originalLink: "l",
    originalPath: "p",
    originalRedirect: "r",
    originalHrefURL: "x",
    originalSrcURL: "y",
    originalScriptURL: "z",
    date: "b",
    IP: "e",
    fileName: "g",
    port: "o",
    responseCode: "s",
    title: "t",
    metaTags: "M",
    massagedURL: "N",
    languageString: "Q",
    uniqueness: "U",
    newsGroup: "B",
    rulespaceCategory: "C",
    multiColumnLanguageDescription: "G",
    someWeirdFBISWhatsChangedKindaThing: "K",
    comment: "#"
  };

  CDXRecordCollection.prototype._parseSignature = function(signatureData) {
    var marker, signatureMarkers;
    this.delimiter = signatureData.slice(0, 1);
    signatureMarkers = signatureData.slice(5).split(" ");
    return this.signature = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = signatureMarkers.length; _i < _len; _i++) {
        marker = signatureMarkers[_i];
        _results.push(this.reverseSignatureMap[marker]);
      }
      return _results;
    }).call(this);
  };

  CDXRecordCollection.prototype._transform = function(chunk, encoding, done) {
    var err, line, lines, record, _i, _len;
    this._buffer += chunk;
    lines = this._buffer.split(/\r?\n/);
    this._buffer = lines.pop();
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      if (!this._headerFound) {
        this._parseSignature(line);
        this._headerFound = true;
      } else {
        try {
          record = this.createRecord(line);
          this.push(record);
        } catch (_error) {
          err = _error;
          this.emit("error", err);
          return;
        }
      }
    }
    return done();
  };

  CDXRecordCollection.prototype.createRecord = function(data) {
    var record;
    record = new CDXRecord(this.delimiter, this.signature);
    record.parseRecord(data);
    this.records.push(record);
    return record;
  };

  return CDXRecordCollection;

})(stream.Transform);
